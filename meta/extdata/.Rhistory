}
count<-1:dim(bicResult@RowxNumber)[1]
res<-c(res,count[!(count %in% res)])
order[count[!(count %in% res)]]<-0;
}else{
for(i in 1:le){
res<-c(res,which(bicResult@NumberxCol[i,])[!(which(bicResult@NumberxCol[i,]) %in% res)])
order[which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)]]<-i;
}
count<-1:dim(bicResult@NumberxCol)[2]
order[count[!(count %in% res)]]<-0;
}
if(rev) order<-rev(order)
order
fbicorder<-function(bicResult, cols=TRUE, rev=FALSE)
{
i<-numeric()
le<-dim(bicResult@RowxNumber)[2]
res<-c()
order<-vector();
if(!cols){
for(i in 1:le){
order[which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)]]<-i;
res<-c(res,which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)])
}
count<-1:dim(bicResult@RowxNumber)[1]
res<-c(res,count[!(count %in% res)])
order[count[!(count %in% res)]]<-0;
}else{
for(i in 1:le){
order[which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)]]<-i;
res<-c(res,which(bicResult@NumberxCol[i,])[!(which(bicResult@NumberxCol[i,]) %in% res)])
}
count<-1:dim(bicResult@NumberxCol)[2]
order[count[!(count %in% res)]]<-0;
}
if(rev) order<-rev(order)
order
}
fbicorder(bics, cols=TRUE, rev=FALSE)
fbicorder<-function(bicResult, cols=TRUE, rev=FALSE)
{
i<-numeric()
le<-dim(bicResult@RowxNumber)[2]
res<-c()
order<-vector();
if(!cols){
for(i in 1:le){
order[which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)]]<-i;
res<-c(res,which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)])
}
count<-1:dim(bicResult@RowxNumber)[1]
res<-c(res,count[!(count %in% res)])
order[count[!(count %in% res)]]<-0;
}else{
for(i in 1:le){
order[which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)]]<-i;
res<-c(res,which(bicResult@NumberxCol[i,])[!(which(bicResult@NumberxCol[i,]) %in% res)])
}
count<-1:dim(bicResult@NumberxCol)[2]
order[count[!(count %in% res)]]<-0;
}
if(rev) order<-rev(order)
order
}
fbicorder(bics, cols=TRUE, rev=FALSE)
count
length(count)
mydata=matrix(rnorm(3000),60,50)
mydata[12:26,12:26]=rnorm(15*15,3,0.3)
mydata[27:44,27:44]=rnorm(18*18,10,0.3)
mydata[45:50,45:50]=rnorm(6*6,30,0.3)
mydata <- na.omit(mydata) # listwise deletion of missing
mydata <- scale(mydata) # standardize variables
fbicorder(bics, cols=TRUE, rev=FALSE)
library("biclust")
set.seed(1)
bics <- biclust(mydata,BCPlaid(), back.fit = 2, shuffle = 3, fit.model = ~m + a + b,iter.startup = 5, iter.layer = 30, verbose = TRUE)
bics@Number
dim(bics@RowxNumber)
bicluseresult<-bicluster(mydata, bics, number= 1:bics@Number)
bicluseresult
group<-biclusternumber(bics)
fbicorder(bics, cols=TRUE, rev=FALSE)
bicResult<-bics
cols=TRUE
rev=FALSE
i<-numeric()
le<-dim(bicResult@RowxNumber)[2]
le
mydata=matrix(rnorm(3000),60,50)
mydata[12:26,12:26]=rnorm(15*15,3,0.3)
mydata[27:44,27:44]=rnorm(18*18,10,0.3)
mydata[45:50,45:50]=rnorm(6*6,30,0.3)
mydata <- na.omit(mydata) # listwise deletion of missing
mydata <- scale(mydata) # standardize variables
group1<-fhclust(mydata,cut=4,bootstrap=F)
group2<-fkmeans(mydata,cut=4)
library("biclust")
set.seed(1)
bics <- biclust(mydata,BCPlaid(), back.fit = 2, shuffle = 3, fit.model = ~m + a + b,iter.startup = 5, iter.layer = 30, verbose = TRUE)
bics@Number
w
dim(bics@RowxNumber)
fbicorder<-function(bicResult, cols=TRUE, rev=FALSE)
{
i<-numeric()
le<-dim(bicResult@RowxNumber)[2]+1
res<-c()
order<-vector();
if(!cols){
for(i in 1:le){
order[which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)]]<-i;
res<-c(res,which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)])
}
count<-1:dim(bicResult@RowxNumber)[1]
res<-c(res,count[!(count %in% res)])
order[count[!(count %in% res)]]<-0;
}else{
for(i in 1:le){
order[which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)]]<-i;
res<-c(res,which(bicResult@NumberxCol[i,])[!(which(bicResult@NumberxCol[i,]) %in% res)])
}
count<-1:dim(bicResult@NumberxCol)[2]
order[count[!(count %in% res)]]<-0;
}
if(rev) order<-rev(order)
order
}
fbicorder(bics, cols=TRUE, rev=FALSE)
bicluseresult<-bicluster(mydata, bics, number= 1:bics@Number)
bicluseresult
group<-biclusternumber(bics)
fbicorder(bics, cols=TRUE, rev=FALSE)
set.seed(1)
bics <- biclust(mydata,BCPlaid(), back.fit = 2, shuffle = 3, fit.model = ~m + a + b,iter.startup = 5, iter.layer = 30, verbose = TRUE)
bics@Number
dim(bics@RowxNumber)
bicluseresult<-bicluster(mydata, bics, number= 1:bics@Number)
bicluseresult
group<-biclusternumber(bics)
fbicorder(bics, cols=TRUE, rev=FALSE)
le<-dim(bicResult@RowxNumber)[2]+1
le
bicResult<-bics
bics
bicResult<-bics
cols=TRUE
rev=FALSE
u
le<-dim(bicResult@RowxNumber)[2]+1
le
res<-c()
order<-vector();
if(!cols){
for(i in 1:le){
order[which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)]]<-i;
res<-c(res,which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)])
}
count<-1:dim(bicResult@RowxNumber)[1]
res<-c(res,count[!(count %in% res)])
order[count[!(count %in% res)]]<-0;
}else{
for(i in 1:le){
order[which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)]]<-i;
res<-c(res,which(bicResult@NumberxCol[i,])[!(which(bicResult@NumberxCol[i,]) %in% res)])
}
count<-1:dim(bicResult@NumberxCol)[2]
order[count[!(count %in% res)]]<-0;
}
if(rev) order<-rev(order)
order
i
i<-1
order[which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)]]<-i;
order
res<-c(res,which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)])
res
i<-numeric()
le<-dim(bicResult@RowxNumber)[2]+1
res<-c()
order<-vector();
order[which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)]]<-i;
order
i<-1
order[which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)]]<-i;
order
res<-c(res,which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)])
res
i<-2
order[which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)]]<-i;
order
res<-c(res,which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)])
res
i<-i+1
order[which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)]]<-i;
order
res<-c(res,which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)])
i<-i+1
order[which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)]]<-i;
order
res<-c(res,which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)])
res
i<-4
length(order)
i<-numeric()
le<-dim(bicResult@RowxNumber)[2]+1
res<-c()
order<-vector();
order[which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)]]<-i;
order
res<-c(res,which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)])
res
bicResult<-bics
cols=TRUE
rev=FALSE
i<-numeric()
le<-dim(bicResult@RowxNumber)[2]+1
res<-c()
order<-vector();
order[which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)]]<-i;
order
i<-numeric()
le<-dim(bicResult@RowxNumber)[2]+1
le
res<-c()
order<-vector();
i<-1
order[which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)]]<-i;
order
res<-c(res,which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)])
res
i<-2
order[which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)]]<-i;
order
res<-c(res,which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)])
res
i<-3
order[which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)]]<-i;
order
res<-c(res,which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)])
res
length(res)
is.na(order)
sum(! is.na(order))
i<-4
order[which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)]]<-i;
order
group<-biclusternumber(bics)
group
bicluseresult<-bicluster(mydata, bics, number= 1:bics@Number)
bicluseresult
bicorder(bics, cols=TRUE, rev=FALSE)
x<-bicorder(bics, cols=TRUE, rev=FALSE)
length(x)
dim(mydata)
fbicorder<-function(bicResult, cols=TRUE, rev=FALSE)
{
i<-numeric()
le<-dim(bicResult@RowxNumber)[2]+1
res<-c()
order<-vector();
if(!cols){
for(i in 1:le){
order[which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)]]<-i;
res<-c(res,which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)])
}
count<-1:dim(bicResult@RowxNumber)[1]
res<-c(res,count[!(count %in% res)])
order[count[!(count %in% res)]]<-0;
}else{
for(i in 1:le){
order[which(bicResult@RowxNumber[i,])[!(which(bicResult@RowxNumber[i,]) %in% res)]]<-i;
res<-c(res,which(bicResult@NumberxCol[i,])[!(which(bicResult@NumberxCol[i,]) %in% res)])
}
count<-1:dim(bicResult@NumberxCol)[2]
order[count[!(count %in% res)]]<-0;
}
if(rev) order<-rev(order)
order
}
fbicorder(bics, cols=TRUE, rev=FALSE)
fbicorder<-function(bicResult, cols=TRUE, rev=FALSE)
{
i<-numeric()
le<-dim(bicResult@RowxNumber)[2]
res<-c()
order<-vector();
if(!cols){
for(i in 1:le){
order[which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)]]<-i;
res<-c(res,which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)])
}
count<-1:dim(bicResult@RowxNumber)[1]
res<-c(res,count[!(count %in% res)])
order[count[!(count %in% res)]]<-0;
}else{
for(i in 1:le){
order[which(bicResult@RowxNumber[i,])[!(which(bicResult@RowxNumber[i,]) %in% res)]]<-i;
res<-c(res,which(bicResult@NumberxCol[i,])[!(which(bicResult@NumberxCol[i,]) %in% res)])
}
count<-1:dim(bicResult@NumberxCol)[2]
order[count[!(count %in% res)]]<-0;
}
if(rev) order<-rev(order)
order
}
fbicorder(bics, cols=TRUE, rev=FALSE)
i<-numeric()
le<-dim(bicResult@RowxNumber)[2]
res<-c()
order<-vector();
if(!cols){
for(i in 1:le){
order[which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)]]<-i;
res<-c(res,which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)])
}
count<-1:dim(bicResult@RowxNumber)[1]
res<-c(res,count[!(count %in% res)])
order[count[!(count %in% res)]]<-0;
}else{
for(i in 1:le){
order[which(bicResult@RowxNumber[i,])[!(which(bicResult@RowxNumber[i,]) %in% res)]]<-i;
res<-c(res,which(bicResult@NumberxCol[i,])[!(which(bicResult@NumberxCol[i,]) %in% res)])
}
count<-1:dim(bicResult@NumberxCol)[2]
order[count[!(count %in% res)]]<-0;
}
if(rev) order<-rev(order)
order
i
i<-1
order[which(bicResult@RowxNumber[i,])[!(which(bicResult@RowxNumber[i,]) %in% res)]]<-i;
bicResult<-bics
cols=TRUE
rev=FALSE
i<-numeric()
le<-dim(bicResult@RowxNumber)[2]
res<-c()
order<-vector();
i<-1
order[which(bicResult@RowxNumber[i,])[!(which(bicResult@RowxNumber[i,]) %in% res)]]<-i;
order
fbicorder<-function(bicResult, cols=TRUE, rev=FALSE)
{
i<-numeric()
le<-dim(bicResult@RowxNumber)[2]
res<-c()
order<-vector();
if(!cols){
for(i in 1:le){
order[which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)]]<-i;
res<-c(res,which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)])
}
count<-1:dim(bicResult@RowxNumber)[1]
res<-c(res,count[!(count %in% res)])
order[count[!(count %in% res)]]<-0;
}else{
for(i in 1:le){
order[which(bicResult@NumberxCol[i,])[!(which(bicResult@NumberxCol[i,]) %in% res)]]<-i;
res<-c(res,which(bicResult@NumberxCol[i,])[!(which(bicResult@NumberxCol[i,]) %in% res)])
}
count<-1:dim(bicResult@NumberxCol)[2]
order[count[!(count %in% res)]]<-0;
}
if(rev) order<-rev(order)
order
}
fbicorder(bics, cols=TRUE, rev=FALSE)
fbicorder(bics, cols=FALSE, rev=FALSE)
le<-dim(bicResult@RowxNumber)[2]
le
le<-dim(bicResult@NumberxCol)[2]
le
le<-dim(bicResult@NumberxCol)[1]
le
fbicorder<-function(bicResult, cols=TRUE, rev=FALSE)
{
i<-numeric()
res<-c()
order<-vector();
if(!cols){
le<-dim(bicResult@RowxNumber)[2]
for(i in 1:le){
order[which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)]]<-i;
res<-c(res,which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)])
}
count<-1:dim(bicResult@RowxNumber)[1]
res<-c(res,count[!(count %in% res)])
order[count[!(count %in% res)]]<-0;
}else{
le<-dim(bicResult@NumberxCol)[1]
for(i in 1:le){
order[which(bicResult@NumberxCol[i,])[!(which(bicResult@NumberxCol[i,]) %in% res)]]<-i;
res<-c(res,which(bicResult@NumberxCol[i,])[!(which(bicResult@NumberxCol[i,]) %in% res)])
}
count<-1:dim(bicResult@NumberxCol)[2]
order[count[!(count %in% res)]]<-0;
}
if(rev) order<-rev(order)
order
}
fbicorder(bics, cols=FALSE, rev=FALSE)
fbicorder(bics, cols=TRUE, rev=FALSE)
bicResult<-bics
cols=TRUE
fbicorder<-function(bicResult, cols=TRUE, rev=FALSE)
{
i<-numeric()
res<-c()
order<-vector();
if(!cols){
le<-dim(bicResult@RowxNumber)[2]
for(i in 1:le){
order[which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)]]<-i;
res<-c(res,which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)])
}
count<-1:dim(bicResult@RowxNumber)[2]
res<-c(res,count[!(count %in% res)])
order[count[!(count %in% res)]]<-0;
}else{
le<-dim(bicResult@NumberxCol)[1]
for(i in 1:le){
order[which(bicResult@NumberxCol[i,])[!(which(bicResult@NumberxCol[i,]) %in% res)]]<-i;
res<-c(res,which(bicResult@NumberxCol[i,])[!(which(bicResult@NumberxCol[i,]) %in% res)])
}
count<-1:dim(bicResult@NumberxCol)[1]
order[count[!(count %in% res)]]<-0;
}
if(rev) order<-rev(order)
order
}
fbicorder(bics, cols=FALSE, rev=FALSE)
fbicorder(bics, cols=TRUE, rev=FALSE)
le<-dim(bicResult@RowxNumber)[2]
le
count<-1:dim(bicResult@RowxNumber)[2]
count
count<-1:dim(bicResult@RowxNumber)[1]
count
count<-1:dim(bicResult@NumberxCol)[2]
count
#### Function to order variables or objects that appear in a bicluster[function bicorder]
fbicorder<-function(bicResult, cols=TRUE, rev=FALSE)
{
i<-numeric()
res<-c()
order<-vector();
if(!cols){
le<-dim(bicResult@RowxNumber)[2]
for(i in 1:le){
order[which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)]]<-i;
res<-c(res,which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)])
}
count<-1:dim(bicResult@RowxNumber)[1]
res<-c(res,count[!(count %in% res)])
order[count[!(count %in% res)]]<-0;
}else{
le<-dim(bicResult@NumberxCol)[1]
for(i in 1:le){
order[which(bicResult@NumberxCol[i,])[!(which(bicResult@NumberxCol[i,]) %in% res)]]<-i;
res<-c(res,which(bicResult@NumberxCol[i,])[!(which(bicResult@NumberxCol[i,]) %in% res)])
}
count<-1:dim(bicResult@NumberxCol)[2]
order[count[!(count %in% res)]]<-0;
}
if(rev) order<-rev(order)
order
}
fbicorder(bics, cols=FALSE, rev=FALSE)
fbicorder(bics, cols=TRUE, rev=FALSE)
le<-dim(bicResult@RowxNumber)[2]
le
bicResult<-bics
le<-dim(bicResult@RowxNumber)[2]
le
RowxNumber
count<-1:dim(bicResult@RowxNumber)[1]
count
res<-c(res,count[!(count %in% res)])
res
bicResult<-bics
cols=TRUE
rev=FALSE
#### Function to order variables or objects that appear in a bicluster[function bicorder]
fbicorder<-function(bicResult, cols=TRUE, rev=FALSE)
{
i<-numeric()
res<-c()
order<-vector();
if(!cols){
le<-dim(bicResult@RowxNumber)[2]
for(i in 1:le){
order[which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)]]<-i;
res<-c(res,which(bicResult@RowxNumber[,i])[!(which(bicResult@RowxNumber[,i]) %in% res)])
}
count<-1:dim(bicResult@RowxNumber)[1]
order[count[!(count %in% res)]]<-0;
}else{
le<-dim(bicResult@NumberxCol)[1]
for(i in 1:le){
order[which(bicResult@NumberxCol[i,])[!(which(bicResult@NumberxCol[i,]) %in% res)]]<-i;
res<-c(res,which(bicResult@NumberxCol[i,])[!(which(bicResult@NumberxCol[i,]) %in% res)])
}
count<-1:dim(bicResult@NumberxCol)[2]
order[count[!(count %in% res)]]<-0;
}
if(rev) order<-rev(order)
order
}
fbicorder(bics, cols=FALSE, rev=FALSE)
fbicorder(bics, cols=TRUE, rev=FALSE)
